snippet met
public function $1($2){
	$3
}
endsnippet


snippet pmet
private function $1($2){
	$3
}
endsnippet


snippet arr
$$1 = [
	$2
];
endsnippet


snippet red
return redirect('$1');
endsnippet


snippet redm
return redirect('$1')->withMessage('$2');
endsnippet


snippet rede
return redirect('$1')->withError('$2');
endsnippet


snippet retv
return view('$1');
endsnippet


snippet retvd
return view('$1', [
	'$2' => $$3
]);
endsnippet


snippet vfail
if( $v->fails() ){
	return redirect('$1')->withErrors($v)->withInput();
}
endsnippet


snippet ireq
Request $request
endsnippet


snippet val
$rules = [
	$1
];
$v = Validator::make($request->all(), $rules);
endsnippet


snippet find
$$1 = $2::find($3);
endsnippet


snippet reqi
$request->input('$1')
endsnippet


snippet sentu
$user = Sentinel::getUser();
endsnippet


snippet rc
MoreRoute::('$1', '$2');
endsnippet


snippet rg
Route::get('$1', '$2');
endsnippet


snippet rga
Route::getUser('$1', function () {
	$2
});
endsnippet


snippet rp
Route::post('$1', '$2');
endsnippet


snippet rpa
Route::post('$1', function () {
	$2
});
endsnippet


snippet $
$this->${1}
endsnippet


snippet empmod
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class $1 extends Model {
	use SoftDeletes;

	protected $table = '$2';
	protected $dates = ['deleted_at', 'created_at', 'updated_at'];

}
endsnippet


snippet empcon
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Http\Requests;
use App\Http\Controllers\Controller;

class $1Controller extends Controller {

}
endsnippet


snippet lmcreate
Schema::create('$1', function($table) {
	$table->engine = 'InnoDB';

	$table->increments('id')->unsigned();

	$table->timestamps();
	$table->softDeletes();
});
endsnippet


snippet lmedit
Schema::table('$1', function ($table) {

});
endsnippet


snippet lmforkey
$table->integer('$1')->unsigned();
$table->foreign('$1')->references('id')->on('$2');
endsnippet


snippet lmint
$table->integer('$1');
endsnippet


snippet lmstr
$table->string('$1', $2);
endsnippet


snippet lmenum
$table->enum('$1', [$2])->default('$3');
endsnippet


snippet lmdropt
Schema::drop('$1');
endsnippet


snippet lmdropc
Schema::table('$1', function($table){
	$table->dropColumn('$2');
});
endsnippet
