snippet met
public function $1($2)
{
	$3
}
endsnippet


snippet pmet
private function $1($2)
{
	$3
}
endsnippet


snippet arr
$$1 = [
	$2
];
endsnippet


snippet red
return redirect('$1');
endsnippet


snippet redm
return redirect('$1')->withMessage('$2');
endsnippet


snippet rede
return redirect('$1')->withError('$2');
endsnippet


snippet redn
return redirect()->route('$1');
endsnippet


snippet rednm
return redirect()->route('$1')->withMessage('$2');
endsnippet


snippet redne
return redirect()->route('$1')->withError('$2');
endsnippet

snippet retv
return view('$1');
endsnippet


snippet retvd
return view('$1', [
	'$2' => $$3
]);
endsnippet


snippet vfail
if ($v->fails()) {
	return redirect('$1')->withErrors($v)->withInput();
}
endsnippet


snippet ireq
Request $request
endsnippet


snippet val
$rules = [
	$1
];
$v = Validator::make($request->all(), $rules);
endsnippet


snippet mfind
$$1 = $2::find($3);
endsnippet


snippet mget
$$1 = $2::get();
endsnippet


snippet reqi
$request->input('$1')
endsnippet


snippet sentu
$user = Sentinel::getUser();
endsnippet


snippet rc
MoreRoute::('$1', '$2');
endsnippet


snippet rg
Route::get('$1', '$2');
endsnippet


snippet rga
Route::get('$1', function () {
	$2
});
endsnippet


snippet rp
Route::post('$1', '$2');
endsnippet


snippet rpa
Route::post('$1', function () {
	$2
});
endsnippet


snippet $
$this->${1}
endsnippet


snippet empmod
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class $1 extends Model
{
	use SoftDeletes;

	protected $table = '$2';
	protected $dates = ['deleted_at', 'created_at', 'updated_at'];

}
endsnippet


snippet empcon
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;

use App\Http\Requests;
use App\Http\Controllers\Controller;

class $1Controller extends Controller
{

}
endsnippet


snippet lmcreate
Schema::create('$1', function ($table) {
	$table->engine = 'InnoDB';

	$table->increments('id')->unsigned();

	$table->timestamps();
	$table->softDeletes();
});
endsnippet


snippet lmedit
Schema::table('$1', function ($table) {

});
endsnippet


snippet lmforkey
$table->integer('$1')->unsigned();
$table->foreign('$1')->references('id')->on('$2');
endsnippet


snippet lmint
$table->integer('$1');
endsnippet


snippet lmstr
$table->string('$1', $2);
endsnippet


snippet lmtext
$table->text('$1');
endsnippet


snippet lmbool
$table->boolean('$1');
endsnippet


snippet lmenum
$table->enum('$1', [$2])->default('$3');
endsnippet


snippet lmdropt
Schema::drop('$1');
endsnippet


snippet lmdropc
Schema::table('$1', function ($table) {
	$table->dropColumn('$2');
});
endsnippet


snippet $$r
$$1->$2 = $request->input('$2');
endsnippet


snippet $$o
$$1->$2 = $$3->$2;
endsnippet


snippet $$a
$$1->$2 = $$3['$2'];
endsnippet


snippet $a
'$1' => $2,
endsnippet


snippet $aa
'$1' => '$2',
endsnippet


snippet hasmany
public function $1()
{
	return $this->hasMany('App\Models\\$2');
}
endsnippet


snippet belongsto
public function $1()
{
	return $this->belongsTo('App\Models\\$2');
}
endsnippet


snippet belongstomany
public function $1()
{
	return $this->belongsToMany('App\Models\\$2')->withPivot($3);;
}
endsnippet


snippet myresource
public function getIndex()
{
	$$1s = $2::paginate(20);

	return view('$3.index', [
		'$1s' => $$1s
	]);
}

public function postEdit(Request $request, $id = null)
{
	$rules = [
		$4
	];

	$v = Validator::make($request->all(), $rules);

	if ($v->fails()) {
		return redirect('$5/'. ( $id ? "edit/$id" : 'create' ))->withErrors($v)->withInput();
	}

	$$1 = $id ? $2::find($id) : new $2;
	if ($id && !$$1) {
		return redirect('$5')->withError('Could not find $1');
	}

	$$1->save();

	$message = $id ? '$2 has been updated' : '$2 has been created';
	return redirect('$5')->withMessage($message);
}

public function getEdit(Request $request, $id = null)
{
	$$1 = $id ? $2::find($id) : null;

	if ($id && !$$1) {
		return redirect('$5')->withMessage('Could not find $1');
	}

	return view('$3.edit', [
		'$1' => $$1
	]);
}

public function postCreate(Request $request)
{
	return $this->postEdit($request, null);
}

public function getCreate(Request $request)
{
	return $this->getEdit($request, null);
}

public function getDelete($id)
{
	$$1 = $2::find($id);

	if (!$$1) {
		return redirect('$5')->withError('Could not find $1');
	}

	$$1->delete();

	return redirect('$5')->withMessage('$2 has been removed');
}
endsnippet
